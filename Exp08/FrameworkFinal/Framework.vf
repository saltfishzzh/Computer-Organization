////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2012 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.4
//  \   \         Application : sch2hdl
//  /   /         Filename : Framework.vf
// /___/   /\     Timestamp : 05/04/2017 14:46:36
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -sympath "C:/Users/Jerry Chang/Desktop/COD/Exp08/FrameworkFinal/ipcore_dir" -intstyle ise -family kintex7 -verilog "C:/Users/Jerry Chang/Desktop/COD/Exp08/FrameworkFinal/Framework.vf" -w "C:/Users/Jerry Chang/Desktop/COD/Exp08/FrameworkFinal/Framework.sch"
//Design Name: Framework
//Device: kintex7
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale 1ns / 1ps

module Data_path_INT_MUSER_Framework(ALUSrc_B, 
                                     ALU_Control, 
                                     Branch, 
                                     clk, 
                                     DatatoReg, 
                                     Data_in, 
                                     eret, 
                                     inst_field, 
                                     INT, 
                                     Jal, 
                                     RegDst, 
                                     RegWrite, 
                                     rst, 
                                     ALU_out, 
                                     Data_out, 
                                     overflow, 
                                     PC_out, 
                                     zero);

    input ALUSrc_B;
    input [2:0] ALU_Control;
    input [1:0] Branch;
    input clk;
    input [1:0] DatatoReg;
    input [31:0] Data_in;
    input eret;
    input [25:0] inst_field;
    input INT;
    input Jal;
    input RegDst;
    input RegWrite;
    input rst;
   output [31:0] ALU_out;
   output [31:0] Data_out;
   output overflow;
   output [31:0] PC_out;
   output zero;
   
   wire [31:0] a;
   wire [31:0] b;
   wire [31:0] imm_32;
   wire N0;
   wire [31:0] pc_4;
   wire V5;
   wire [4:0] XLXN_25;
   wire [4:0] XLXN_27;
   wire [31:0] XLXN_28;
   wire [31:0] XLXN_50;
   wire [31:0] XLXN_59;
   wire [31:0] XLXN_60;
   wire [31:0] ALU_out_DUMMY;
   wire [31:0] Data_out_DUMMY;
   wire [31:0] PC_out_DUMMY;
   
   assign ALU_out[31:0] = ALU_out_DUMMY[31:0];
   assign Data_out[31:0] = Data_out_DUMMY[31:0];
   assign PC_out[31:0] = PC_out_DUMMY[31:0];
   MUX2T1_5  XLXI_3 (.I0(XLXN_25[4:0]), 
                    .I1(inst_field[15:11]), 
                    .s(RegDst), 
                    .o(XLXN_27[4:0]));
   Ext_32  XLXI_4 (.imm_16(inst_field[15:0]), 
                  .Imm_32(imm_32[31:0]));
   MUX2T1_32  XLXI_5 (.I0(Data_out_DUMMY[31:0]), 
                     .I1(imm_32[31:0]), 
                     .s(ALUSrc_B), 
                     .o(b[31:0]));
   MUX2T1_5  XLXI_10 (.I0(inst_field[20:16]), 
                     .I1({V5, V5, V5, V5, V5}), 
                     .s(Jal), 
                     .o(XLXN_25[4:0]));
   REG32  XLXI_11 (.CE(V5), 
                  .clk(clk), 
                  .D(XLXN_60[31:0]), 
                  .rst(rst), 
                  .Q(PC_out_DUMMY[31:0]));
   MUX4T1_32  XLXI_12 (.I0(pc_4[31:0]), 
                      .I1(XLXN_50[31:0]), 
                      .I2({pc_4[31:28], inst_field[25:0], N0, N0}), 
                      .I3(a[31:0]), 
                      .s(Branch[1:0]), 
                      .o(XLXN_59[31:0]));
   add_32  XLXI_13 (.a(pc_4[31:0]), 
                   .b({imm_32[29:0], N0, N0}), 
                   .c(XLXN_50[31:0]));
   add_32  XLXI_14 (.a(PC_out_DUMMY[31:0]), 
                   .b({N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, 
         N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, V5, N0, 
         N0}), 
                   .c(pc_4[31:0]));
   MUX4T1_32  XLXI_15 (.I0(ALU_out_DUMMY[31:0]), 
                      .I1(Data_in[31:0]), 
                      .I2({inst_field[15:0], N0, N0, N0, N0, N0, N0, N0, N0, 
         N0, N0, N0, N0, N0, N0, N0, N0}), 
                      .I3(pc_4[31:0]), 
                      .s(DatatoReg[1:0]), 
                      .o(XLXN_28[31:0]));
   VCC  XLXI_16 (.P(V5));
   alu  XLXI_17 (.A(a[31:0]), 
                .ALU_operation(ALU_Control[2:0]), 
                .B(b[31:0]), 
                .overflow(overflow), 
                .res(ALU_out_DUMMY[31:0]), 
                .zero(zero));
   GND  XLXI_18 (.G(N0));
   Regs  XLXI_19 (.clk(), 
                 .L_S(RegWrite), 
                 .rst(), 
                 .R_addr_A(inst_field[25:21]), 
                 .R_addr_B(inst_field[20:16]), 
                 .Wt_addr(XLXN_27[4:0]), 
                 .Wt_data(XLXN_28[31:0]), 
                 .rdata_A(a[31:0]), 
                 .rdata_B(Data_out_DUMMY[31:0]));
   ARM_INT  XLXI_20 (.clk(clk), 
                    .eret(eret), 
                    .INT(INT), 
                    .pc_next(XLXN_59[31:0]), 
                    .reset(rst), 
                    .pc(XLXN_60[31:0]));
endmodule
`timescale 1ns / 1ps

module SCPU_INT_MUSER_Framework(clk, 
                                Data_in, 
                                inst_in, 
                                INT, 
                                MIO_ready, 
                                reset, 
                                Addr_out, 
                                CPU_MIO, 
                                Data_out, 
                                mem_w, 
                                PC_out);

    input clk;
    input [31:0] Data_in;
    input [31:0] inst_in;
    input INT;
    input MIO_ready;
    input reset;
   output [31:0] Addr_out;
   output CPU_MIO;
   output [31:0] Data_out;
   output mem_w;
   output [31:0] PC_out;
   
   wire XLXN_61;
   wire XLXN_62;
   wire [1:0] XLXN_63;
   wire XLXN_64;
   wire [1:0] XLXN_65;
   wire XLXN_66;
   wire [2:0] XLXN_67;
   wire XLXN_68;
   wire XLXN_72;
   
   SCPU_ctrl_INT  XLXI_5 (.Fun(inst_in[5:0]), 
                         .int_code(inst_in[25]), 
                         .MIO_ready(MIO_ready), 
                         .OPcode(inst_in[31:26]), 
                         .zero(XLXN_72), 
                         .ALUSrc_B(XLXN_62), 
                         .ALU_Control(XLXN_67[2:0]), 
                         .Branch(XLXN_65[1:0]), 
                         .CPU_MIO(CPU_MIO), 
                         .DatatoReg(XLXN_63[1:0]), 
                         .eret(XLXN_68), 
                         .Jal(XLXN_64), 
                         .mem_w(mem_w), 
                         .RegDst(XLXN_61), 
                         .RegWrite(XLXN_66));
   Data_path_INT_MUSER_Framework  XLXI_6 (.ALUSrc_B(XLXN_62), 
                                         .ALU_Control(XLXN_67[2:0]), 
                                         .Branch(XLXN_65[1:0]), 
                                         .clk(clk), 
                                         .DatatoReg(XLXN_63[1:0]), 
                                         .Data_in(Data_in[31:0]), 
                                         .eret(XLXN_68), 
                                         .inst_field(inst_in[25:0]), 
                                         .INT(INT), 
                                         .Jal(XLXN_64), 
                                         .RegDst(XLXN_61), 
                                         .RegWrite(XLXN_66), 
                                         .rst(reset), 
                                         .ALU_out(Addr_out[31:0]), 
                                         .Data_out(Data_out[31:0]), 
                                         .overflow(), 
                                         .PC_out(PC_out[31:0]), 
                                         .zero(XLXN_72));
endmodule
`timescale 1ns / 1ps

module Framework(clk_100mhz, 
                 K_COL, 
                 RSTN, 
                 SW, 
                 AN, 
                 Buzzer, 
                 CR, 
                 K_ROW, 
                 LED, 
                 LEDCLK, 
                 LEDCLR, 
                 LEDDT, 
                 LEDEN, 
                 RDY, 
                 readn, 
                 SEGCLK, 
                 SEGCLR, 
                 SEGDT, 
                 SEGEN, 
                 SEGMENT);

    input clk_100mhz;
    input [3:0] K_COL;
    input RSTN;
    input [15:0] SW;
   output [3:0] AN;
   output Buzzer;
   output CR;
   output [4:0] K_ROW;
   output [7:0] LED;
   output LEDCLK;
   output LEDCLR;
   output LEDDT;
   output LEDEN;
   output RDY;
   output readn;
   output SEGCLK;
   output SEGCLR;
   output SEGDT;
   output SEGEN;
   output [7:0] SEGMENT;
   
   wire [31:0] Addr_out;
   wire [31:0] Ai;
   wire [31:0] Bi;
   wire [7:0] blink;
   wire [3:0] BTN_OK;
   wire Clk_CPU;
   wire [31:0] Counter_out;
   wire [31:0] CPU2IO;
   wire [31:0] Data_in;
   wire [31:0] Data_out;
   wire [31:0] Disp_num;
   wire [31:0] Div;
   wire GPIOF0;
   wire [31:0] inst;
   wire IO_clk;
   wire [15:0] LED_out;
   wire [7:0] LE_out;
   wire N0;
   wire [31:0] PC;
   wire [7:0] point_out;
   wire [3:0] Pulse;
   wire rst;
   wire [15:0] SW_OK;
   wire V5;
   wire [4:0] XLXN_9;
   wire XLXN_269;
   wire XLXN_274;
   wire XLXN_276;
   wire XLXN_277;
   wire XLXN_278;
   wire [31:0] XLXN_288;
   wire [9:0] XLXN_289;
   wire [0:0] XLXN_290;
   wire [31:0] XLXN_291;
   wire XLXN_294;
   wire [1:0] XLXN_305;
   wire XLXN_306;
   wire RDY_DUMMY;
   wire readn_DUMMY;
   
   assign RDY = RDY_DUMMY;
   assign readn = readn_DUMMY;
   SAnti_jitter  XLXI_2 (.clk(clk_100mhz), 
                        .Key_y(K_COL[3:0]), 
                        .readn(readn_DUMMY), 
                        .RSTN(RSTN), 
                        .SW(SW[15:0]), 
                        .BTN_OK(BTN_OK[3:0]), 
                        .CR(CR), 
                        .Key_out(XLXN_9[4:0]), 
                        .Key_ready(RDY_DUMMY), 
                        .Key_x(K_ROW[4:0]), 
                        .pulse_out(Pulse[3:0]), 
                        .rst(XLXN_274), 
                        .SW_OK(SW_OK[15:0]));
   clk_div  XLXI_3 (.clk(clk_100mhz), 
                   .rst(XLXN_274), 
                   .SW2(SW_OK[2]), 
                   .clkdiv(Div[31:0]), 
                   .Clk_CPU(Clk_CPU));
   Multi_8CH32  XLXI_4 (.clk(IO_clk), 
                       .Data0(CPU2IO[31:0]), 
                       .data1({N0, N0, PC[31:2]}), 
                       .data2(inst[31:0]), 
                       .data3(Counter_out[31:0]), 
                       .data4(Addr_out[31:0]), 
                       .data5(Data_out[31:0]), 
                       .data6(Data_in[31:0]), 
                       .data7(PC[31:0]), 
                       .EN(XLXN_306), 
                       .LES({N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, 
         N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, 
         N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, 
         N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, 
         N0}), 
                       .point_in({Div[31:0], Div[31:0]}), 
                       .rst(XLXN_274), 
                       .Test(SW_OK[7:5]), 
                       .Disp_num(Disp_num[31:0]), 
                       .LE_out(LE_out[7:0]), 
                       .point_out(point_out[7:0]));
   SEnter_2_32  XLXI_5 (.BTN(BTN_OK[2:0]), 
                       .clk(clk_100mhz), 
                       .Ctrl({SW_OK[7:5], SW_OK[15], SW_OK[0]}), 
                       .Din(XLXN_9[4:0]), 
                       .D_ready(RDY_DUMMY), 
                       .Ai(Ai[31:0]), 
                       .Bi(Bi[31:0]), 
                       .blink(blink[7:0]), 
                       .readn(readn_DUMMY));
   Display  XLXI_6 (.clk(clk_100mhz), 
                   .flash(Div[25]), 
                   .Hexs(Disp_num[31:0]), 
                   .LES(LE_out[7:0]), 
                   .point(point_out[7:0]), 
                   .rst(rst), 
                   .Start(Div[20]), 
                   .Text(SW_OK[0]), 
                   .segclk(SEGCLK), 
                   .segclrn(SEGCLR), 
                   .SEGEN(SEGEN), 
                   .segsout(SEGDT));
   GND  XLXI_8 (.G(N0));
   RAM_B  XLXI_13 (.addra(XLXN_289[9:0]), 
                  .clka(clk_100mhz), 
                  .dina(XLXN_291[31:0]), 
                  .wea(XLXN_290[0]), 
                  .douta(XLXN_288[31:0]));
   ROM_D  XLXI_15 (.a(PC[11:2]), 
                  .spo(inst[31:0]));
   GPIO  XLXI_17 (.clk(IO_clk), 
                 .EN(GPIOF0), 
                 .P_Data(CPU2IO[31:0]), 
                 .rst(XLXN_274), 
                 .Start(Div[20]), 
                 .counter_set(XLXN_305[1:0]), 
                 .GPIOf0(), 
                 .led_clk(LEDCLK), 
                 .led_clrn(LEDCLR), 
                 .LED_out(LED_out[15:0]), 
                 .LED_PEN(LEDEN), 
                 .led_sout(LEDDT));
   VCC  XLXI_18 (.P(Buzzer));
   MIO_BUS  XLXI_21 (.addr_bus(Addr_out[31:0]), 
                    .BTN(BTN_OK[3:0]), 
                    .clk(clk_100mhz), 
                    .counter_out(Counter_out[31:0]), 
                    .counter0_out(XLXN_276), 
                    .counter1_out(XLXN_277), 
                    .counter2_out(XLXN_278), 
                    .Cpu_data2bus(Data_out[31:0]), 
                    .led_out(LED_out[15:0]), 
                    .mem_w(XLXN_269), 
                    .ram_data_out(XLXN_288[31:0]), 
                    .rst(XLXN_274), 
                    .SW(SW_OK[15:0]), 
                    .counter_we(XLXN_294), 
                    .Cpu_data4bus(Data_in[31:0]), 
                    .data_ram_we(XLXN_290[0]), 
                    .GPIOe0000000_we(XLXN_306), 
                    .GPIOf0000000_we(GPIOF0), 
                    .Peripheral_in(CPU2IO[31:0]), 
                    .ram_addr(XLXN_289[9:0]), 
                    .ram_data_in(XLXN_291[31:0]));
   Counter  XLXI_22 (.clk(IO_clk), 
                    .clk0(Div[6]), 
                    .clk1(Div[9]), 
                    .clk2(Div[11]), 
                    .counter_ch(XLXN_305[1:0]), 
                    .counter_val(CPU2IO[31:0]), 
                    .counter_we(XLXN_294), 
                    .rst(XLXN_274), 
                    .counter_out(Counter_out[31:0]), 
                    .counter0_OUT(XLXN_276), 
                    .counter1_OUT(XLXN_277), 
                    .counter2_OUT(XLXN_278));
   INV  XLXI_24 (.I(Clk_CPU), 
                .O(IO_clk));
   VCC  XLXI_25 (.P(V5));
   PIO  XLXI_26 (.clk(IO_clk), 
                .EN(GPIOF0), 
                .PData_in(CPU2IO[31:0]), 
                .rst(rst), 
                .counter_set(), 
                .GPIOf0(), 
                .LED_out(LED[7:0]));
   Seg7_Dev  XLXI_27 (.flash(Div[25]), 
                     .Hexs(Disp_num[31:0]), 
                     .LES(LE_out[7:0]), 
                     .point(point_out[7:0]), 
                     .Scan({SW_OK[1], Div[19:18]}), 
                     .SW0(SW_OK[0]), 
                     .AN(AN[3:0]), 
                     .SEGMENT(SEGMENT[7:0]));
   SCPU_INT_MUSER_Framework  XLXI_29 (.clk(Clk_CPU), 
                                     .Data_in(Data_in[31:0]), 
                                     .inst_in(inst[31:0]), 
                                     .INT(XLXN_276), 
                                     .MIO_ready(), 
                                     .reset(XLXN_274), 
                                     .Addr_out(Addr_out[31:0]), 
                                     .CPU_MIO(), 
                                     .Data_out(Data_out[31:0]), 
                                     .mem_w(XLXN_269), 
                                     .PC_out(PC[31:0]));
endmodule
