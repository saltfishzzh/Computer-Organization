////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2012 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.4
//  \   \         Application : sch2hdl
//  /   /         Filename : Framework.vf
// /___/   /\     Timestamp : 05/16/2017 18:30:48
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -sympath "C:/Users/Jerry Chang/Desktop/COD/Exp09/FrameworkFinal/ipcore_dir" -intstyle ise -family kintex7 -verilog "C:/Users/Jerry Chang/Desktop/COD/Exp09/FrameworkFinal/Framework.vf" -w "C:/Users/Jerry Chang/Desktop/COD/Exp09/FrameworkFinal/Framework.sch"
//Design Name: Framework
//Device: kintex7
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale 1ns / 1ps

module MCPU_MUSER_Framework(clk, 
                            Data_in, 
                            INT, 
                            MIO_ready, 
                            reset, 
                            Addr_out, 
                            CPU_MIO, 
                            Data_out, 
                            inst_out, 
                            mem_w, 
                            PC_out, 
                            state);

    input clk;
    input [31:0] Data_in;
    input INT;
    input MIO_ready;
    input reset;
   output [31:0] Addr_out;
   output CPU_MIO;
   output [31:0] Data_out;
   output [31:0] inst_out;
   output mem_w;
   output [31:0] PC_out;
   output [4:0] state;
   
   wire XLXN_1;
   wire XLXN_2;
   wire XLXN_3;
   wire XLXN_4;
   wire XLXN_5;
   wire XLXN_6;
   wire XLXN_7;
   wire [1:0] XLXN_8;
   wire [1:0] XLXN_9;
   wire [1:0] XLXN_10;
   wire [1:0] XLXN_11;
   wire [2:0] XLXN_12;
   wire XLXN_18;
   wire XLXN_25;
   wire XLXN_28;
   wire XLXN_29;
   wire XLXN_30;
   wire [31:0] inst_out_DUMMY;
   
   assign inst_out[31:0] = inst_out_DUMMY[31:0];
   MCtrl  XLXI_1 (.clk(clk), 
                 .Inst_in(inst_out_DUMMY[31:0]), 
                 .MIO_ready(MIO_ready), 
                 .overflow(XLXN_18), 
                 .reset(reset), 
                 .zero(XLXN_25), 
                 .ALUSrcA(XLXN_4), 
                 .ALUSrcB(XLXN_10[1:0]), 
                 .ALU_operation(XLXN_12[2:0]), 
                 .Branch(XLXN_7), 
                 .CPU_MIO(CPU_MIO), 
                 .IorD(XLXN_1), 
                 .IRWrite(XLXN_2), 
                 .MemRead(XLXN_28), 
                 .MemtoReg(XLXN_9[1:0]), 
                 .MemWrite(XLXN_29), 
                 .PCSource(XLXN_11[1:0]), 
                 .PCWrite(XLXN_5), 
                 .PCWriteCond(XLXN_6), 
                 .RegDst(XLXN_8[1:0]), 
                 .RegWrite(XLXN_3), 
                 .state_out(state[4:0]));
   MDPath  XLXI_3 (.ALUSrcA(XLXN_4), 
                  .ALUSrcB(XLXN_10[1:0]), 
                  .ALU_operation(XLXN_12[2:0]), 
                  .Branch(XLXN_7), 
                  .clk(clk), 
                  .data2CPU(Data_in[31:0]), 
                  .IorD(XLXN_1), 
                  .IRWrite(XLXN_2), 
                  .MemtoReg(XLXN_9[1:0]), 
                  .MIO_ready(MIO_ready), 
                  .PCSource(XLXN_11[1:0]), 
                  .PCWrite(XLXN_5), 
                  .PCWriteCond(XLXN_6), 
                  .RegDst(XLXN_8[1:0]), 
                  .RegWrite(XLXN_3), 
                  .reset(reset), 
                  .data_out(Data_out[31:0]), 
                  .Inst(inst_out_DUMMY[31:0]), 
                  .M_addr(Addr_out[31:0]), 
                  .overflow(XLXN_18), 
                  .PC_Current(PC_out[31:0]), 
                  .zero(XLXN_25));
   INV  XLXI_4 (.I(XLXN_28), 
               .O(XLXN_30));
   AND2  XLXI_5 (.I0(XLXN_29), 
                .I1(XLXN_30), 
                .O(mem_w));
endmodule
`timescale 1ns / 1ps

module Framework(clk_100mhz, 
                 K_COL, 
                 RSTN, 
                 SW, 
                 AN, 
                 Buzzer, 
                 CR, 
                 K_ROW, 
                 LED, 
                 LEDCLK, 
                 LEDCLR, 
                 LEDDT, 
                 LEDEN, 
                 RDY, 
                 readn, 
                 SEGCLK, 
                 SEGCLR, 
                 SEGDT, 
                 SEGEN, 
                 SEGMENT);

    input clk_100mhz;
    input [3:0] K_COL;
    input RSTN;
    input [15:0] SW;
   output [3:0] AN;
   output Buzzer;
   output CR;
   output [4:0] K_ROW;
   output [7:0] LED;
   output LEDCLK;
   output LEDCLR;
   output LEDDT;
   output LEDEN;
   output RDY;
   output readn;
   output SEGCLK;
   output SEGCLR;
   output SEGDT;
   output SEGEN;
   output [7:0] SEGMENT;
   
   wire [31:0] Addr_out;
   wire [31:0] Ai;
   wire [31:0] Bi;
   wire [7:0] blink;
   wire [3:0] BTN_OK;
   wire Clk_CPU;
   wire [31:0] Counter_out;
   wire [31:0] CPU2IO;
   wire [31:0] Data_in;
   wire [31:0] Data_out;
   wire [31:0] Disp_num;
   wire [31:0] Div;
   wire GPIOF0;
   wire [31:0] inst;
   wire IO_clk;
   wire [15:0] LED_out;
   wire [7:0] LE_out;
   wire N0;
   wire [31:0] PC;
   wire [7:0] point_out;
   wire [3:0] Pulse;
   wire rst;
   wire [4:0] State;
   wire [15:0] SW_OK;
   wire V5;
   wire [4:0] XLXN_9;
   wire XLXN_269;
   wire XLXN_274;
   wire XLXN_276;
   wire XLXN_277;
   wire XLXN_278;
   wire [31:0] XLXN_288;
   wire [9:0] XLXN_289;
   wire [0:0] XLXN_290;
   wire [31:0] XLXN_291;
   wire XLXN_294;
   wire [1:0] XLXN_305;
   wire XLXN_306;
   wire RDY_DUMMY;
   wire readn_DUMMY;
   
   assign RDY = RDY_DUMMY;
   assign readn = readn_DUMMY;
   SAnti_jitter  XLXI_2 (.clk(clk_100mhz), 
                        .Key_y(K_COL[3:0]), 
                        .readn(readn_DUMMY), 
                        .RSTN(RSTN), 
                        .SW(SW[15:0]), 
                        .BTN_OK(BTN_OK[3:0]), 
                        .CR(CR), 
                        .Key_out(XLXN_9[4:0]), 
                        .Key_ready(RDY_DUMMY), 
                        .Key_x(K_ROW[4:0]), 
                        .pulse_out(Pulse[3:0]), 
                        .rst(XLXN_274), 
                        .SW_OK(SW_OK[15:0]));
   clk_div  XLXI_3 (.clk(clk_100mhz), 
                   .rst(XLXN_274), 
                   .SW2(SW_OK[2]), 
                   .clkdiv(Div[31:0]), 
                   .Clk_CPU(Clk_CPU));
   Multi_8CH32  XLXI_4 (.clk(IO_clk), 
                       .Data0(CPU2IO[31:0]), 
                       .data1({N0, N0, PC[31:2]}), 
                       .data2(inst[31:0]), 
                       .data3(Counter_out[31:0]), 
                       .data4(Addr_out[31:0]), 
                       .data5(Data_out[31:0]), 
                       .data6(Data_in[31:0]), 
                       .data7(PC[31:0]), 
                       .EN(XLXN_306), 
                       .LES({N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, 
         N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, 
         N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, 
         N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, 
         N0}), 
                       .point_in({Div[31:0], Div[31:0]}), 
                       .rst(XLXN_274), 
                       .Test(SW_OK[7:5]), 
                       .Disp_num(Disp_num[31:0]), 
                       .LE_out(LE_out[7:0]), 
                       .point_out(point_out[7:0]));
   SEnter_2_32  XLXI_5 (.BTN(BTN_OK[2:0]), 
                       .clk(clk_100mhz), 
                       .Ctrl({SW_OK[7:5], SW_OK[15], SW_OK[0]}), 
                       .Din(XLXN_9[4:0]), 
                       .D_ready(RDY_DUMMY), 
                       .Ai(Ai[31:0]), 
                       .Bi(Bi[31:0]), 
                       .blink(blink[7:0]), 
                       .readn(readn_DUMMY));
   Display  XLXI_6 (.clk(clk_100mhz), 
                   .flash(Div[25]), 
                   .Hexs(Disp_num[31:0]), 
                   .LES(LE_out[7:0]), 
                   .point(point_out[7:0]), 
                   .rst(rst), 
                   .Start(Div[20]), 
                   .Text(SW_OK[0]), 
                   .segclk(SEGCLK), 
                   .segclrn(SEGCLR), 
                   .SEGEN(SEGEN), 
                   .segsout(SEGDT));
   GND  XLXI_8 (.G(N0));
   RAM_B  XLXI_13 (.addra(XLXN_289[9:0]), 
                  .clka(clk_100mhz), 
                  .dina(XLXN_291[31:0]), 
                  .wea(XLXN_290[0]), 
                  .douta(XLXN_288[31:0]));
   GPIO  XLXI_17 (.clk(IO_clk), 
                 .EN(GPIOF0), 
                 .P_Data(CPU2IO[31:0]), 
                 .rst(XLXN_274), 
                 .Start(Div[20]), 
                 .counter_set(XLXN_305[1:0]), 
                 .GPIOf0(), 
                 .led_clk(LEDCLK), 
                 .led_clrn(LEDCLR), 
                 .LED_out(LED_out[15:0]), 
                 .LED_PEN(LEDEN), 
                 .led_sout(LEDDT));
   VCC  XLXI_18 (.P(Buzzer));
   MIO_BUS  XLXI_21 (.addr_bus(Addr_out[31:0]), 
                    .BTN(BTN_OK[3:0]), 
                    .clk(clk_100mhz), 
                    .counter_out(Counter_out[31:0]), 
                    .counter0_out(XLXN_276), 
                    .counter1_out(XLXN_277), 
                    .counter2_out(XLXN_278), 
                    .Cpu_data2bus(Data_out[31:0]), 
                    .led_out(LED_out[15:0]), 
                    .mem_w(XLXN_269), 
                    .ram_data_out(XLXN_288[31:0]), 
                    .rst(XLXN_274), 
                    .SW(SW_OK[15:0]), 
                    .counter_we(XLXN_294), 
                    .Cpu_data4bus(Data_in[31:0]), 
                    .data_ram_we(XLXN_290[0]), 
                    .GPIOe0000000_we(XLXN_306), 
                    .GPIOf0000000_we(GPIOF0), 
                    .Peripheral_in(CPU2IO[31:0]), 
                    .ram_addr(XLXN_289[9:0]), 
                    .ram_data_in(XLXN_291[31:0]));
   Counter  XLXI_22 (.clk(IO_clk), 
                    .clk0(Div[6]), 
                    .clk1(Div[9]), 
                    .clk2(Div[11]), 
                    .counter_ch(XLXN_305[1:0]), 
                    .counter_val(CPU2IO[31:0]), 
                    .counter_we(XLXN_294), 
                    .rst(XLXN_274), 
                    .counter_out(Counter_out[31:0]), 
                    .counter0_OUT(XLXN_276), 
                    .counter1_OUT(XLXN_277), 
                    .counter2_OUT(XLXN_278));
   INV  XLXI_24 (.I(Clk_CPU), 
                .O(IO_clk));
   VCC  XLXI_25 (.P(V5));
   PIO  XLXI_26 (.clk(IO_clk), 
                .EN(GPIOF0), 
                .PData_in(CPU2IO[31:0]), 
                .rst(rst), 
                .counter_set(), 
                .GPIOf0(), 
                .LED_out(LED[7:0]));
   Seg7_Dev  XLXI_27 (.flash(Div[25]), 
                     .Hexs(Disp_num[31:0]), 
                     .LES(LE_out[7:0]), 
                     .point(point_out[7:0]), 
                     .Scan({SW_OK[1], Div[19:18]}), 
                     .SW0(SW_OK[0]), 
                     .AN(AN[3:0]), 
                     .SEGMENT(SEGMENT[7:0]));
   MCPU_MUSER_Framework  XLXI_30 (.clk(Clk_CPU), 
                                 .Data_in(Data_in[31:0]), 
                                 .INT(XLXN_276), 
                                 .MIO_ready(V5), 
                                 .reset(XLXN_274), 
                                 .Addr_out(Addr_out[31:0]), 
                                 .CPU_MIO(), 
                                 .Data_out(Data_out[31:0]), 
                                 .inst_out(inst[31:0]), 
                                 .mem_w(XLXN_269), 
                                 .PC_out(PC[31:0]), 
                                 .state(State[4:0]));
endmodule
