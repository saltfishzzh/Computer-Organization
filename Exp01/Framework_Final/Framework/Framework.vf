////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.7
//  \   \         Application : sch2hdl
//  /   /         Filename : Framework.vf
// /___/   /\     Timestamp : 02/28/2017 20:57:24
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -sympath "C:/Users/laylalaisy/Desktop/Second Year/Computer Organization and Design/Project/ProjectCode/demo/ipcore_dir" -intstyle ise -family kintex7 -verilog "C:/Users/laylalaisy/Desktop/Second Year/Computer Organization and Design/Project/ProjectCode/demo/Framework.vf" -w "C:/Users/laylalaisy/Desktop/Second Year/Computer Organization and Design/Project/ProjectCode/demo/Framework.sch"
//Design Name: Framework
//Device: kintex7
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale 1ns / 1ps

module Framework(clk_100mhz, 
                 K_COL, 
                 RSTN, 
                 SW, 
                 Buzzer, 
                 CR, 
                 K_ROW, 
                 LEDCLK, 
                 LEDCLR, 
                 LEDDT, 
                 LEDEN, 
                 RDY, 
                 readn, 
                 SEGCLK, 
                 SEGCLR, 
                 SEGDT, 
                 SEGEN);

    input clk_100mhz;
    input [3:0] K_COL;
    input RSTN;
    input [15:0] SW;
   output Buzzer;
   output CR;
   output [4:0] K_ROW;
   output LEDCLK;
   output LEDCLR;
   output LEDDT;
   output LEDEN;
   output RDY;
   output readn;
   output SEGCLK;
   output SEGCLR;
   output SEGDT;
   output SEGEN;
   
   wire [31:0] Ai;
   wire [31:0] Bi;
   wire [7:0] blink;
   wire [3:0] BTN_OK;
   wire Clk_CPU;
   wire [31:0] Disp_num;
   wire [31:0] Div;
   wire [7:0] LE_out;
   wire N0;
   wire [7:0] point_out;
   wire [3:0] Pulse;
   wire rst;
   wire [15:0] SW_OK;
   wire V5;
   wire [4:0] XLXN_9;
   wire [31:0] XLXN_58;
   wire [31:0] XLXN_59;
   wire [31:0] XLXN_60;
   wire [31:0] XLXN_61;
   wire [31:0] XLXN_63;
   wire XLXN_69;
   wire XLXN_72;
   wire [31:0] XLXN_75;
   wire RDY_DUMMY;
   wire readn_DUMMY;
   
   assign RDY = RDY_DUMMY;
   assign readn = readn_DUMMY;
   SAnti_jitter  XLXI_2 (.clk(clk_100mhz), 
                        .Key_y(K_COL[3:0]), 
                        .readn(readn_DUMMY), 
                        .RSTN(RSTN), 
                        .SW(SW[15:0]), 
                        .BTN_OK(BTN_OK[3:0]), 
                        .CR(CR), 
                        .Key_out(XLXN_9[4:0]), 
                        .Key_ready(RDY_DUMMY), 
                        .Key_x(K_ROW[4:0]), 
                        .pulse_out(Pulse[3:0]), 
                        .rst(XLXN_72), 
                        .SW_OK(SW_OK[15:0]));
   clk_div  XLXI_3 (.clk(clk_100mhz), 
                   .rst(XLXN_72), 
                   .SW2(SW_OK[2]), 
                   .clkdiv(Div[31:0]), 
                   .Clk_CPU(Clk_CPU));
   Multi_8CH32  XLXI_4 (.clk(clk_100mhz), 
                       .Data0(Ai[31:0]), 
                       .data1(Bi[31:0]), 
                       .data2(Div[31:0]), 
                       .data3(XLXN_58[31:0]), 
                       .data4(XLXN_59[31:0]), 
                       .data5(XLXN_60[31:0]), 
                       .data6(XLXN_61[31:0]), 
                       .data7(XLXN_63[31:0]), 
                       .EN(V5), 
                       .LES({N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, 
         blink[3:0], N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, 
         N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, 
         N0, blink[7:0], blink[7:0]}), 
                       .point_in({Div[31:0], Div[31:0]}), 
                       .rst(XLXN_72), 
                       .Test(SW_OK[7:5]), 
                       .Disp_num(Disp_num[31:0]), 
                       .LE_out(LE_out[7:0]), 
                       .point_out(point_out[7:0]));
   SEnter_2_32  XLXI_5 (.BTN(BTN_OK[2:0]), 
                       .clk(clk_100mhz), 
                       .Ctrl({SW_OK[7:5], SW_OK[15], SW_OK[0]}), 
                       .Din(XLXN_9[4:0]), 
                       .D_ready(RDY_DUMMY), 
                       .Ai(Ai[31:0]), 
                       .Bi(Bi[31:0]), 
                       .blink(blink[7:0]), 
                       .readn(readn_DUMMY));
   Display  XLXI_6 (.clk(clk_100mhz), 
                   .flash(Div[25]), 
                   .Hexs(Disp_num[31:0]), 
                   .LES(LE_out[7:0]), 
                   .point(point_out[7:0]), 
                   .rst(rst), 
                   .Start(Div[10]), 
                   .Text(SW_OK[0]), 
                   .seg_clk(SEGCLK), 
                   .seg_clrn(SEGCLR), 
                   .SEG_PEN(SEGEN), 
                   .seg_sout(SEGDT));
   VCC  XLXI_7 (.P(V5));
   GND  XLXI_8 (.G(N0));
   RAM_B  XLXI_13 (.addra({N0, N0, N0, N0, N0, SW[3], Div[27:24]}), 
                  .clka(XLXN_69), 
                  .dina(XLXN_61[31:0]), 
                  .wea(SW_OK[4]), 
                  .douta(XLXN_63[31:0]));
   ROM_D  XLXI_15 (.a({N0, N0, N0, N0, N0, SW[3], Div[27:24]}), 
                  .spo(XLXN_61[31:0]));
   INV  XLXI_16 (.I(clk_100mhz), 
                .O(XLXN_69));
   GPIO  XLXI_17 (.clk(clk_100mhz), 
                 .EN(V5), 
                 .P_Data(XLXN_75[31:0]), 
                 .rst(XLXN_72), 
                 .Start(Div[10]), 
                 .counter_set(), 
                 .GPIOf0(), 
                 .led_clk(LEDCLK), 
                 .led_clrn(LEDCLR), 
                 .LED_out(), 
                 .LED_PEN(LEDEN), 
                 .led_sout(LEDDT));
   VCC  XLXI_18 (.P(Buzzer));
endmodule
